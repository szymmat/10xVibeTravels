@* Komponent modalny do szybkiego tworzenia notatki *@
@namespace _10xVibeTravels.Components.Shared.Modals
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using _10xVibeTravels.Requests
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using _10xVibeTravels.Interfaces

@inject INoteService NoteService 
@inject NavigationManager NavigationManager 
@inject AuthenticationStateProvider AuthenticationStateProvider // Wstrzyknięcie dostawcy stanu autoryzacji

@if (Visible)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                @* Użycie EditForm do obsługi formularza i walidacji *@
                <EditForm Model="noteModel" OnValidSubmit="HandleSave" FormName="QuickNoteForm">
                    <DataAnnotationsValidator /> @* Włączenie walidacji opartej na atrybutach *@
                    
                    <div class="modal-header">
                        <h5 class="modal-title">Nowa Szybka Notatka</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close" disabled="@isSaving"></button> @* Wyłącz przycisk zamykania podczas zapisu *@
                    </div>
                    <div class="modal-body">
                        @* Komunikat o błędzie zapisu *@
                        @if (!string.IsNullOrEmpty(saveErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @saveErrorMessage
                            </div>
                        }
                        <ValidationSummary /> @* Wyświetlanie podsumowania błędów walidacji *@
                        
                        <div class="mb-3">
                            <label for="noteTitle" class="form-label">Tytuł</label>
                            <InputText id="noteTitle" class="form-control" @bind-Value="noteModel.Title" disabled="@isSaving" />
                            <ValidationMessage For="() => noteModel.Title" />
                        </div>
                        <div class="mb-3">
                            <label for="noteContent" class="form-label">Treść</label>
                            <InputTextArea id="noteContent" class="form-control" @bind-Value="noteModel.Content" rows="5" disabled="@isSaving" />
                             <ValidationMessage For="() => noteModel.Content" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal" disabled="@isSaving">Anuluj</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="visually-hidden">Zapisywanie...</span>
                                <span> Zapisywanie...</span>
                            }
                            else
                            {
                                <span>Zapisz</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    /// <summary>
    /// Kontroluje widoczność modala.
    /// </summary>
    [Parameter] public bool Visible { get; set; }

    /// <summary>
    /// Callback do obsługi dwukierunkowego bindowania (@bind-Visible).
    /// </summary>
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }

    /// <summary>
    /// Callback wywoływany po pomyślnym zapisaniu notatki.
    /// </summary>
    [Parameter] public EventCallback OnNoteSaved { get; set; }

    // Model formularza
    private CreateNoteRequest noteModel = new();
    private EditContext? editContext; // Potrzebne do ewentualnego resetowania walidacji
    private string? currentUserId; // Przechowanie ID użytkownika

    // Zmienne stanu dla obsługi zapisu
    private bool isSaving = false;
    private string? saveErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Pobranie ID użytkownika przy inicjalizacji komponentu
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        ResetForm(); // Inicjalizacja modelu i EditContext
    }

    // Resetowanie formularza przy zmianie widoczności
    protected override void OnParametersSet()
    {
        if (Visible)
        {
             // Jeśli modal staje się widoczny, a nie był, resetujemy stan błędu zapisu
             // Reset formularza odbywa się w CloseModal lub OnInitialized
             saveErrorMessage = null;
             isSaving = false;
        }
    }

    private void ResetForm()
    {
        noteModel = new CreateNoteRequest();
        editContext = new EditContext(noteModel); // Utwórz nowy EditContext
        saveErrorMessage = null; // Resetuj błąd przy resetowaniu formularza
        isSaving = false;
    }

    private async Task CloseModal()
    {
        ResetForm(); // Resetuj formularz przy zamykaniu
        await VisibleChanged.InvokeAsync(false);
    }

    private async Task HandleSave()
    {
        if (string.IsNullOrEmpty(currentUserId))
        {
            saveErrorMessage = "Błąd: Nie można zidentyfikować użytkownika."; // Ustaw komunikat błędu
            return; 
        }

        isSaving = true;
        saveErrorMessage = null; // Wyczyść poprzedni błąd
        StateHasChanged(); // Odśwież UI, aby pokazać spinner

        try
        {
            // Wywołanie serwisu
            await NoteService.CreateNoteAsync(currentUserId, noteModel);
            
            // Sukces - nie ma potrzeby wyświetlania komunikatu w modalu, bo zaraz się zamknie
            Console.WriteLine("Notatka zapisana pomyślnie."); 

            await OnNoteSaved.InvokeAsync(); // Wywołanie callbacku do rodzica
            await CloseModal(); // Zamknij modal po sukcesie
            // TODO: Opcjonalnie - wywołanie callback do Home.razor w celu odświeżenia listy - ZROBIONE
        }
        catch (Exception ex)
        {    
            Console.WriteLine($"Error saving note: {ex.Message}"); // Loguj szczegóły
            saveErrorMessage = "Wystąpił błąd podczas zapisywania notatki. Spróbuj ponownie."; // Ustaw ogólny komunikat dla użytkownika
        }
        finally
        {
            isSaving = false;
            StateHasChanged(); // Odśwież UI, aby ukryć spinner/włączyć przyciski
        }
    }
} 