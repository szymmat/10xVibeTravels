name: Pull Request CI

on: [pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # Required to comment on PRs
      contents: read # Required to checkout code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build project
        run: dotnet build 10xVibeTravels/10xVibeTravels.csproj --configuration Release

      - name: Run unit tests with coverage
        run: dotnet test 10VibeTravels.Tests/10VibeTravels.Tests.csproj --configuration Release --collect:"XPlat Code Coverage"

      - name: Post PR Comment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ Kompilacja i testy zakończone pomyślnie! Zebrano informacje o pokryciu kodu.`
            });
  build-and-push:
    name: Build and Push Docker Image
    needs: [build_and_test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/szymmat/10xVibeTravels
          tags: |
            type=sha,prefix=
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 