<!-- Generate Plan Modal -->
@using System.ComponentModel.DataAnnotations
@namespace _10xVibeTravels.Components.Shared.Modals

@if (IsVisible)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <EditForm Model="@inputModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">Generate Travel Plan</h5>
                        <button type="button" class="btn-close" @onclick="HandleCancel" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <ValidationSummary class="mb-3" />
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="inputModel.StartDate" />
                            <ValidationMessage For="() => inputModel.StartDate" />
                        </div>
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <InputDate id="endDate" class="form-control" @bind-Value="inputModel.EndDate" />
                            <ValidationMessage For="() => inputModel.EndDate" />
                        </div>
                        <div class="mb-3">
                            <label for="budget" class="form-label">Budget (Optional)</label>
                            <InputNumber id="budget" class="form-control" @bind-Value="inputModel.Budget" ParsingErrorMessage="Please enter a valid number for the budget." />
                            <ValidationMessage For="() => inputModel.Budget" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                        <button type="submit" class="btn btn-primary">Generate Plan</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<GeneratePlanInputModel> OnGenerate { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private GeneratePlanInputModel inputModel = new GeneratePlanInputModel();

    // Reset form when it becomes visible
    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
             // Reset the model to default values each time the modal is opened
            inputModel = new GeneratePlanInputModel();
             // Optionally set StartDate to today, etc.
            // inputModel.StartDate = DateTime.Today;
        }
    }

    private async Task HandleValidSubmit()
    {
        await OnGenerate.InvokeAsync(inputModel);
    }

    private async Task HandleCancel()
    {
        // Resetting model on cancel might be good practice too
        inputModel = new GeneratePlanInputModel();
        await OnCancel.InvokeAsync();
    }

    // ViewModel definition as per implementation plan
    public class GeneratePlanInputModel : IValidatableObject
    {
        [Required(ErrorMessage = "Data początkowa jest wymagana.")]
        public DateTime? StartDate { get; set; } = DateTime.Today; // Default to today

        [Required(ErrorMessage = "Data końcowa jest wymagana.")]
        public DateTime? EndDate { get; set; } = DateTime.Today.AddDays(7); // Default to a week later

        [Range(0, (double)decimal.MaxValue, ErrorMessage = "Budżet musi być wartością nieujemną.")] // Use decimal.MaxValue
        public decimal? Budget { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (StartDate.HasValue && EndDate.HasValue && EndDate.Value < StartDate.Value)
            {
                yield return new ValidationResult("End Date must be on or after Start Date.", new[] { nameof(EndDate) });
            }
        }
    }
} 