<!-- Edit Note Modal -->
@using _10xVibeTravels.Dtos
@using System.ComponentModel.DataAnnotations
@namespace _10xVibeTravels.Components.Shared.Modals

@if (IsVisible)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <EditForm Model="@editModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title">Edytuj notatkę</h5>
                        <button type="button" class="btn-close" @onclick="HandleCancel" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <ValidationSummary class="mb-3" />
                        <div class="mb-3">
                            <label for="noteTitle" class="form-label">Tytuł</label>
                            <InputText id="noteTitle" class="form-control" @bind-Value="editModel.Title" />
                            <ValidationMessage For="() => editModel.Title" />
                        </div>
                        <div class="mb-3">
                            <label for="noteContent" class="form-label">Treść</label>
                            <InputTextArea id="noteContent" class="form-control" @bind-Value="editModel.Content" rows="6" />
                             <ValidationMessage For="() => editModel.Content" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Anuluj</button>
                        <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public NoteDto? InitialNoteData { get; set; }
    [Parameter] public EventCallback<NoteEditViewModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private NoteEditViewModel editModel = new NoteEditViewModel();

    protected override void OnParametersSet()
    {
        // Reset the model when the modal becomes visible with new initial data
        if (IsVisible && InitialNoteData != null)
        {
             editModel = new NoteEditViewModel
             {
                 Title = InitialNoteData.Title,
                 Content = InitialNoteData.Content
             };
        }
        // Optional: Consider resetting editModel if IsVisible becomes false to clear state
        // else if (!IsVisible)
        // {
        //     editModel = new NoteEditViewModel(); // Reset if modal is hidden
        // }
    }

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(editModel);
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
    }

    // ViewModel definition as per implementation plan
    public class NoteEditViewModel
    {
        [Required(ErrorMessage = "Tytuł jest wymagany.")]
        [MaxLength(100, ErrorMessage = "Tytuł nie może przekraczać 100 znaków.")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Treść jest wymagana.")]
        [MaxLength(2000, ErrorMessage = "Treść nie może przekraczać 2000 znaków.")]
        public string Content { get; set; } = string.Empty;
    }
} 